@page "/"
@using TalentForgeTestServer.Models
@using TalentForgeTestServer.Services
@using Microsoft.AspNetCore.Components.Forms
@using System.Text.Json
@using System.Globalization
@inject IMissionService MissionService
@inject IJSRuntime JSRuntime
@inject NavigationManager NavManager

<style>
    .visualisation {
        background-color: #e7f1ff; /* Fond bleu clair */
        color: #000;
        padding: 20px;
        border-radius: 10px;
    }

    .btn-certification {
        background-color: #6c757d;
        color: #fff;
        border: none;
    }

        .btn-certification:hover {
            background-color: #5a6268;
        }
</style>
<style>
    .visualisation {
        background-color: #e7f1ff;
        color: #000;
        padding: 20px;
        border-radius: 10px;
    }

    .btn-certification {
        background-color: #6c757d;
        color: #fff;
        border: none;
    }

        .btn-certification:hover {
            background-color: #5a6268;
        }

    

    /* Styles ajoutés pour la visualisation Présentation */
    .titre-gauche {
        text-transform: uppercase;
        font-weight: bold;
        color: #003865;
        margin-top: 1.5rem;
    }

    .titre-droite {
        font-weight: bold;
        color: #F15A24;
        margin-top: 1rem;
    }

    .liste-puce {
        padding-left: 1.2rem;
        margin-bottom: 1rem;
    }

        .liste-puce li {
            margin-bottom: 0.3rem;
        }

    .section-droite p {
        margin-bottom: 0.4rem;
    }
</style>



<div class="container py-5">
    @*──────────────────────── UI : CHOIX INITIAL ────────────────────────*@
    @if (mode == PageMode.None)
    {
        <div class="row justify-content-center">
            <div class="col-md-6 text-center">
                <div class="btn-group btn-group-lg">
                    <button type="button" class="btn btn-primary" @onclick="ChooseMission">
                        Mise à jour Mission
                    </button>
                    <button type="button" class="btn btn-secondary btn-certification" @onclick="ChooseCertification">
                        Mise à jour Certification
                    </button>
                    <button type="button" class="btn btn-success" @onclick="ChoosePresentation">
                        Mise à jour Présentation
                    </button>

                </div>
            </div>
        </div>
    }

    @*──────────────────── FORMULAIRE MISSION ─────────────────────*@
    @if (mode == PageMode.Mission)
    {
        <div class="card mb-4">
            <div class="card-header"><h5 class="mb-0">Mise à jour Mission</h5></div>
            <div class="card-body">
                <EditForm Model="@mission" OnValidSubmit="UpdateMissionAsync">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <div class="row g-3">
                        <div class="col-md-6">
                            <label class="form-label">Client</label>
                            <InputSelect class="form-select" @bind-Value="mission.Client">
                                <option value="">-- Sélectionner --</option>
                                @foreach (var c in clients)
                                {
                                    <option value="@c">@c</option>
                                }
                            </InputSelect>
                        </div>

                        <div class="col-md-6">
                            <label class="form-label">Activité</label>
                            <InputSelect class="form-select" @bind-Value="mission.Activity">
                                <option value="">-- Sélectionner --</option>
                                @foreach (var a in activities)
                                {
                                    <option value="@a">@a</option>
                                }
                            </InputSelect>
                        </div>

                        <div class="col-md-6">
                            <label class="form-label">Titre de la mission</label>
                            <InputText class="form-control"
                                       @bind-Value="mission.MissionTitle"
                                       placeholder="Titre de la mission" />
                        </div>

                        <div class="col-12">
                            <label class="form-label">Détail de la mission</label>
                            <textarea @ref="detailsRef"
                                      id="missionDetails"
                                      class="form-control"
                                      @bind="mission.MissionDetails"
                                      rows="6"
                                      placeholder="Description complète de la mission">
                                </textarea>
                        </div>

                        <div class="col-12">
                            <label class="form-label">Technologies utilisées</label>
                            @for (int i = 0; i < mission.Technologies.Count; i++)
                            {
                                var idx = i;

                                if (idx >= mission.IsCustomTech.Count || idx >= mission.CustomTechValues.Count)
                                {
                                    continue; // sécurité en cas de désynchronisation
                                }

                                <div class="input-group mb-2" @key=idx>
                                    @if (!mission.IsCustomTech[idx])
                                    {
                                        <select class="form-select"
                                                value="@mission.Technologies[idx]"
                                                @onchange="e => OnTechChanged(e, idx)">
                                            <option value="">-- Sélectionner --</option>
                                            @foreach (var t in allTechs)
                                            {
                                                <option value="@t">@t</option>
                                            }
                                        </select>
                                    }
                                    else
                                    {
                                        <input class="form-control"
                                               placeholder="Entrer une technologie personnalisée"
                                               value="@mission.CustomTechValues[idx]"
                                               @oninput="e => OnCustomTechChanged(e, idx)" />
                                    }

                                    <div class="input-group-text">
                                        <input type="checkbox"
                                               class="form-check-input mt-0"
                                               title="Autre"
                                               checked="@mission.IsCustomTech[idx]"
                                               @onchange="@(_ => ToggleMissionCustomTech(idx))" />
                                        <label class="form-check-label ms-2">Autre</label>
                                    </div>

                                    <button type="button"
                                            class="btn btn-outline-danger"
                                            @onclick="@(() => RemoveTech(idx))"
                                            disabled="@(mission.Technologies.Count == 1)">
                                        ❌
                                    </button>
                                </div>
                            }


                            <button type="button" class="btn btn-outline-primary"
                                    @onclick="AddTech"
                                    disabled="@(mission.Technologies.Count >= 8)">
                                ➕ Ajouter une techno
                            </button>
                        </div>

                        <div class="col-md-6">
                            <label class="form-label">Date de début</label>
                            <InputDate class="form-control" @bind-Value="mission.StartDate" />
                        </div>

                        <div class="col-md-6">
                            <label class="form-label">Date de fin</label>
                            <InputDate class="form-control" @bind-Value="mission.EndDate" />
                        </div>
                    </div>

                    <div class="d-flex justify-content-between mt-4">
                        <div class="btn-group">
                            <button type="button" class="btn btn-secondary" @onclick="ChooseCertification">
                                Certification →
                            </button>
                            <button type="button" class="btn btn-success" @onclick="ChoosePresentation">
                                Présentation →
                            </button>
                        </div>
                        <div>
                            <button type="button" class="btn btn-outline-info me-2"
                                    @onclick="Visualiser">
                                Visualiser
                            </button>
                            <button type="submit" class="btn btn-primary">
                                Mettre à jour
                            </button>
                        </div>
                    </div>

                </EditForm>
            </div>
        </div>
    }

    @*───────────────── FORMULAIRE CERTIFICATION ─────────────────*@
    @if (mode == PageMode.Certification)
    {
        <div class="card mb-4">
            <div class="card-header"><h5 class="mb-0">Mise à jour Certification</h5></div>
            <div class="card-body">
                <EditForm Model="@mission" OnValidSubmit="UpdateMission">

                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <div class="row g-3">
                        <div class="col-md-8">
                            <label class="form-label">Certifications</label>
                            <InputSelect class="form-select" @bind-Value="mission.CertificationName">
                                <option value="">-- Sélectionner --</option>
                                @foreach (var cert in certifications)
                                {
                                    <option value="@cert">@cert</option>
                                }
                            </InputSelect>
                        </div>
                        <div class="col-md-4 d-flex align-items-end">
                            <div class="form-check">
                                <InputCheckbox class="form-check-input" id="chkOther" @bind-Value="otherChecked" />
                                <label class="form-check-label" for="chkOther">Autre certification</label>
                            </div>
                        </div>

                        @if (otherChecked)
                        {
                            <div class="col-md-6">
                                <label class="form-label">ID</label>
                                <InputText class="form-control" @bind-Value="mission.CertificationId" />
                            </div>
                            <div class="col-md-6">
                                <label class="form-label">Intitulé</label>
                                <InputText class="form-control" @bind-Value="mission.CertificationCustomTitle" />
                            </div>
                        }

                        <div class="col-md-6">
                            <label class="form-label">Date d’obtention</label>
                            <InputDate class="form-control" @bind-Value="mission.CertificationDate" />
                        </div>
                    </div>

                    <div class="d-flex justify-content-between mt-4">
                        <div class="btn-group">
                            <button type="button" class="btn btn-primary btn-certification" @onclick="ChooseMission">
                                ← Mission
                            </button>
                            <button type="button" class="btn btn-success" @onclick="ChoosePresentation">
                                Présentation →
                            </button>
                        </div>
                        <div>
                            <button type="button" class="btn btn-outline-info me-2"
                                    @onclick="Visualiser">
                                Visualiser
                            </button>
                            <button type="submit" class="btn btn-primary">
                                Mettre à jour
                            </button>
                        </div>
                    </div>

                </EditForm>
            </div>
        </div>
    }

    @*──────────────────── VISUALISATION ─────────────────────*@
    @if (missionUpdated && mode == PageMode.Mission)
    {
        <div class="visualisation mt-3">
            <!-- Client en majuscules et en orange -->
            <p style="color: orange; text-transform: uppercase; font-weight: bold; margin-bottom: .5rem;">
                @mission.Client
            </p>
            <!-- Période sur une seule ligne -->
            <p style="margin-bottom: .5rem;">
                <strong>Période :</strong>
                @mission.StartDate.ToString("MMMM yyyy", new CultureInfo("fr-FR"))
                –
                @(mission.EndDate.Date == DateTime.Today
                    ? "Aujourd’hui"
                    : mission.EndDate.ToString("MMMM yyyy", new CultureInfo("fr-FR")))
            </p>
            <!-- Rôle + Activité -->
            <p style="margin-bottom: .5rem;">
                <strong>Rôle :</strong> @mission.Activity
            </p>
            <!-- Mission -->
            <p style="margin-bottom: .25rem;">
                <strong>Mission :</strong> @mission.MissionTitle
            </p>
            @if (!string.IsNullOrWhiteSpace(mission.MissionDetails))
            {
                <ul style="margin-top:0; margin-bottom:1rem;">
                    @foreach (var raw in mission.MissionDetails.Split('\n', StringSplitOptions.RemoveEmptyEntries))
                    {
                        var cleaned = raw.TrimStart();
                        if (cleaned.StartsWith("• ")) cleaned = cleaned.Substring(2);
                        <li>@cleaned</li>
                    }
                </ul>
            }
            <!-- Technos utilisées -->
            <p>
                <strong>Technos :</strong>
                @string.Join(", ",
                         mission.Technologies.Select((t, i) =>
                         mission.IsCustomTech[i] ? mission.CustomTechValues[i] : t
                         ).Where(t => !string.IsNullOrWhiteSpace(t)))
            </p>


        </div>
    }
    @if (missionUpdated && mode == PageMode.Certification)
    {
        <div class="visualisation mt-3">
            <h5>Récapitulatif Certification</h5>
            <p>
                <strong>Nom :</strong>
                @(string.IsNullOrWhiteSpace(mission.CertificationName)
                    ? $"{mission.CertificationId} – {mission.CertificationCustomTitle}"
                    : mission.CertificationName)
            </p>
            <p><strong>Date d’obtention :</strong> @mission.CertificationDate.ToShortDateString()</p>
        </div>
    }
    <!--Formulaire Présentation -->
    @if (mode == PageMode.Presentation)
    {
        <div class="card mb-4">
            <div class="card-header">
                <h5 class="mb-0">Mise à jour Présentation</h5>
            </div>
            <div class="card-body">
                <EditForm Model="@presentation" OnValidSubmit="UpdatePresentationAsync">
                    <DataAnnotationsValidator />
                    <ValidationSummary />
                    <div class="row g-3">
                        <div class="col-md-6">
                            <label class="form-label">Nom</label>
                            <InputText class="form-control" @bind-Value="presentation.Nom" />
                        </div>
                        <div class="col-md-6">
                            <label class="form-label">Rôle</label>
                            <InputText class="form-control" @bind-Value="presentation.Role" />
                        </div>
                        <div class="col-12">
                            <label class="form-label">Présentation</label>
                            <InputTextArea class="form-control" @bind-Value="presentation.Presentation" rows="4" />
                        </div>
                        <div class="col-12">
                            <label class="form-label">Compétence générale</label>
                            <InputTextArea class="form-control" @bind-Value="presentation.CompetenceGenerale" rows="2" />
                        </div>
                        <div class="col-12">
                            <label class="form-label">Détail des compétences (liste à puces)</label>
                            <textarea @ref="competenceDetailsRef"
                                      class="form-control"
                                      @bind="presentation.CompetenceDetails"
                                      rows="6"
                                      placeholder="• ">
                                </textarea>
                        </div>
                        <div class="col-12">
                            <label class="form-label">Secteurs d’activités</label>
                            <textarea @ref="secteursRef"
                                      class="form-control"
                                      @bind="presentation.Secteurs"
                                      rows="6"
                                      placeholder="• ">
                                </textarea>
                        </div>
                        <div class="col-md-6">
                            <label class="form-label">Expérience (années)</label>
                            <input type="range" class="form-range" min="0" max="40" @bind="presentation.Experience" />
                            <div>@presentation.Experience année(s)</div>
                        </div>
                        <div class="col-12">
                            <label class="form-label">Langues</label>
                            <InputTextArea class="form-control" @bind-Value="presentation.Langues" rows="4" />
                        </div>
                        <div class="col-12">
                            <label class="form-label">Cursus de formation</label>
                            <InputTextArea class="form-control" @bind-Value="presentation.Cursus" rows="4" />
                        </div>

                        <div class="col-12">
                            <label class="form-label">Technologies maîtrisées</label>
                            @for (int i = 0; i < presentation.Technologies.Count; i++)
                            {
                                var idx = i;
                                <div class="input-group mb-2" @key=idx>
                                    @if (!presentation.IsCustomTech[idx])
                                    {
                                        <select class="form-select"
                                                value="@presentation.Technologies[idx]"
                                                @onchange="e => OnPresentationTechChanged(e, idx)">
                                            <option value="">-- Sélectionner --</option>
                                            @foreach (var t in allTechs)
                                            {
                                                <option value="@t">@t</option>
                                            }
                                        </select>
                                    }
                                    else
                                    {
                                        <input class="form-control"
                                               placeholder="Entrer une technologie personnalisée"
                                               value="@presentation.CustomTechValues[idx]"
                                               @oninput="e => OnCustomPresentationTechChanged(e, idx)" />
                                    }

                                    <div class="input-group-text">
                                        <input type="checkbox"
                                               class="form-check-input mt-0"
                                               title="Autre"
                                               checked="@presentation.IsCustomTech[idx]"
                                               @onchange="@(_ => ToggleCustomTech(idx))" />
                                        <label class="form-check-label ms-2">Autre</label>
                                    </div>

                                    <button type="button"
                                            class="btn btn-outline-danger"
                                            @onclick="@(() => RemovePresentationTech(idx))"
                                            disabled="@(presentation.Technologies.Count == 1)">
                                        ❌
                                    </button>
                                </div>
                            }

                            <button type="button" class="btn btn-outline-primary"
                                    @onclick="AddPresentationTech"
                                    disabled="@(presentation.Technologies.Count >= 10)">
                                ➕ Ajouter une techno
                            </button>
                        </div>
                    </div>

                    <div class="d-flex justify-content-between mt-4">
                        <div class="btn-group">
                            <button type="button" class="btn btn-secondary" @onclick="ChooseMission">
                                ← Mission
                            </button>
                            <button type="button" class="btn btn-success" @onclick="ChooseCertification">
                                Certification →
                            </button>
                        </div>

                        <div>
                            <button type="button" class="btn btn-outline-info me-2" @onclick="VisualiserPresentation">
                                Visualiser
                            </button>
                            <button type="submit" class="btn btn-primary">
                                Mettre à jour
                            </button>
                        </div>
                    </div>


                </EditForm>
            </div>
        </div>
    }
    @if (mode == PageMode.Presentation && presentationUpdated)
    {
        <div class="visualisation mt-3">
            <div class="row">
                <!-- Colonne gauche -->
                <div class="col-md-8">
                    <h4 style="font-weight: bold;">@presentation.Nom</h4>
                    <p style="font-style: italic;">@presentation.Role</p>

                    <h6 class="titre-gauche">Présentation</h6>
                    <p>@presentation.Presentation</p>

                    <h6 class="titre-gauche">Compétences</h6>
                    @if (!string.IsNullOrWhiteSpace(presentation.CompetenceGenerale))
                    {
                        <p>@presentation.CompetenceGenerale</p>
                    }
                    @if (!string.IsNullOrWhiteSpace(presentation.CompetenceDetails))
                    {
                        <ul class="liste-puce">
                            @foreach (var ligne in presentation.CompetenceDetails.Split('\n', StringSplitOptions.RemoveEmptyEntries))
                            {
                                var cleaned = ligne.TrimStart();
                                if (cleaned.StartsWith("• ")) cleaned = cleaned[2..];
                                <li>@cleaned</li>
                            }
                        </ul>
                    }

                    <h6 class="titre-gauche">Secteurs d’activités</h6>
                    @if (!string.IsNullOrWhiteSpace(presentation.Secteurs))
                    {
                        <ul class="liste-puce">
                            @foreach (var ligne in presentation.Secteurs.Split('\n', StringSplitOptions.RemoveEmptyEntries))
                            {
                                var cleaned = ligne.TrimStart();
                                if (cleaned.StartsWith("• ")) cleaned = cleaned[2..];
                                <li>@cleaned</li>
                            }
                        </ul>
                    }
                </div>

                <!-- Colonne droite -->
                <div class="col-md-4 section-droite">
                    <h6 class="titre-droite">Expérience</h6>
                    <p>@presentation.Experience année(s)</p>

                    <h6 class="titre-droite">Langues</h6>
                    @foreach (var ligne in presentation.Langues.Split('\n', StringSplitOptions.RemoveEmptyEntries))
                    {
                        <p>@ligne</p>
                    }

                    <h6 class="titre-droite">Cursus de formations & certifications</h6>
                    @foreach (var ligne in presentation.Cursus.Split('\n', StringSplitOptions.RemoveEmptyEntries))
                    {
                        <p>@ligne</p>
                    }
                    @if (!string.IsNullOrWhiteSpace(mission.CertificationName))
                    {
                        <p>@mission.CertificationName</p>
                    }

                    <h6 class="titre-droite">Technologies</h6>
                    <ul class="liste-puce">
                        @foreach (var tech in presentation.Technologies.Select((t, i) => presentation.IsCustomTech[i] ? presentation.CustomTechValues[i] : t)
                       .Where(t => !string.IsNullOrWhiteSpace(t)))
                        {
                            <li>@tech</li>
                        }
                    </ul>
                </div>
            </div>
        </div>
        }

 

    
    
</div>

@code {
    private enum PageMode { None, Mission, Certification, Presentation }
    private PageMode mode = PageMode.None;
    private ElementReference secteursRef;
    private bool secteursListInitialized = false;


    private Mission mission = new();
    private bool missionUpdated;
    private bool otherChecked;
    private ElementReference detailsRef;
    private ElementReference competenceDetailsRef;

    private bool listInitialized;
    private PresentationModel presentation = new();


    #region Listes (inchangées)
    private readonly List<string> clients = new()
    {
        "Pierre & Vacances","TotalEnergies","ClubMed","Groupe ADP","Vinci environnement",
        "Vinci Construction","Suez","Saint-Gobain","Renault","Expléo","Korian",
        "Groupe BPCE","Natixis","Caisse d'Epargne","Engie","Alstom","Crédit Agricole",
        "Le Groupe La poste","RATP DEV","BIOMERIEUX","Kiabi","hagerGroup","L'Oréal",
        "Edenred","Ipsen","GRTgaz","Delachaux","Dexia","Le Conservateur","Exail",
        "Safran","Groupe Savencia"
    };

    private readonly List<string> activities = new()
    {
        "DevOps Infra Cloud","Data Engineer","Developpeur .NET","Data Analyst/BI",
        "Architecte DATA","Développeur PowerBI","Pentester","Chef de Projet"
    };

    private readonly List<string> allTechs = new()
    {
       "Adobe Acrobat", "Adobe Illustrator", "Adobe Photoshop", "Adobe XD", "Airflow", "Akamai", "Amazon Redshift", "Anaconda",
    "Android", "Android Studio", "Angular", "Ansible", "Apache Airflow", "Apache Hadoop", "Apache Kafka", "Apache Spark",
    "API REST", "API SOAP", "AppDynamics", "ArchiMate", "Arduino IDE", "Asana", "Atom", "Aurora", "AutoHotKey", "AWS", "Azure",
    "Azure AD", "Azure App Services", "Azure Boards", "Azure DevOps", "Azure Functions", "Azure Key Vault", "Azure Logic Apps",
    "Azure Monitor", "Azure Pipelines", "Azure Repos", "Azure Resource Manager", "Azure SQL Database", "Azure Storage Explorer",
    "Azure Synapse Analytics", "Backstage", "Bash", "Basic", "Bamboo", "Bitbucket", "Bitnami", "Blender", "Bokeh", "Bootstrap",
    "Box", "Box Notes", "BMC Remedy", "Burp Suite", "Camunda", "Canva", "C", "C++", "C#", "ChatGPT", "Cisco ASA",
    "Cisco Packet Tracer", "Cisco Webex", "Citrix", "ClickUp", "CloudFormation", "Cloudflare", "Cloudera", "Clubhouse", "COBOL",
    "CodePen", "Confluence", "Control-M", "Copilot GitHub", "Copilot M365", "Cortex XSOAR", "Coursera", "Crystal Reports", "CSS",
    "Cucumber", "Cypress", "D3.js", "Dagster", "Dart", "Databricks", "DataGrip", "Dataiku", "Datadog", "DBeaver", "dbt",
    "DevTools", "Django", "Discord", "Discourse", "Docker", "Dotnet CLI", ".NET", "Draw.io", "Dropbox", "DVC", "Eclipse",
    "Eclipse Che", "ELK Stack", "Entra ID", "Envoyer", "ETL Tools", "Excel", "Excalidraw", "FastAPI", "Figma", "Firebase",
    "Fivetran", "Fluent UI", "Fortinet", "FortiAnalyzer", "FortiGate", "F5 Big-IP", "FigJam", "Front", "GCP", "GIMP", "Git",
    "GitHub", "GitKraken", "GitLab", "GitOps", "Go", "Gogs", "Gradle", "Grafana", "Graylog", "GSuite", "Groovy",
    "Google Calendar", "Google Colab", "Google Data Studio", "Google Meet", "Google Sheets", "Hadoop", "HashiCorp Vault",
    "Haskell", "Helm", "Heroku", "Hibernate", "Horizon", "HP ALM", "HTML", "Icinga", "IntelliCode", "IntelliJ IDEA", "InVision",
    "Ionic", "iTop", "JBoss", "Java", "JavaScript", "Jenkins", "Jira", "JMeter", "JSON Server", "JWT.io", "Jupyter Notebook",
    "Julia", "Kali Linux", "Kanbanize", "Kibana", "Kibit", "Kotlin", "Kubernetes", "Kustomize", "LabVIEW", "Liferay", "Lighthouse",
    "Linux", "LogRhythm", "Logstash", "Looker", "Lucidchart", "macOS", "Make", "Maltego", "MariaDB", "MATLAB", "Mattermost",
    "Mermaid.js", "Metabase", "Microsoft Loop", "Microsoft Planner", "Microsoft Power BI", "Microsoft Teams",
    "Microsoft Whiteboard", "Mixpanel", "M365", "Miro", "MongoDB", "Mulesoft", "Nagios", "Neo4j", "Nessus", "NetBeans",
    "Netlify", "NetScaler", "Notion", "Notepad++", "NumPy", "OBS Studio", "Objective-C", "Okta", "OneNote", "OpenAI Platform",
    "OpenAPI", "OpenCV", "OpenProject", "OpenSSH", "OpenStack", "Oracle Cloud", "Oracle DB", "Outlook", "Packer", "Pandas",
    "Parrot OS", "Pascal", "Penpot", "Perl", "pgAdmin", "PHP", "Pip", "Postgres", "Postman", "Power Apps", "Power Automate",
    "Power BI", "Power Platform", "PowerPoint", "PowerShell", "Prometheus", "Proxmox", "Python", "PythonAnywhere", "PyTorch",
    "Pydantic", "Pytorch Lightning", "QGIS", "Qlik Sense", "Qualys", "QRadar", "R", "React", "React Native", "Redis",
    "RedisInsight", "Red Hat", "Report Builder", "Robot Framework", "Rollbar", "RStudio", "Ruby", "Rust", "Sage", "Salesforce",
    "SAP", "SAP BW", "SAP BO", "SAP HANA", "Sass", "Scala", "Scikit-learn", "Scrapy", "Selenium", "Sentry", "ServiceNow",
    "SharePoint", "Shell", "Slack", "Snowflake", "SonarQube", "Splunk", "SQL", "SQL Server", "Stack Overflow for Teams",
    "StackBlitz", "StarUML", "Streamlit", "Stylus", "Superset", "Swift", "Tableau", "Tailwind CSS", "Talend", "TeamCity",
    "Terraform", "TestLink", "TestRail", "Thunder Client", "Trello", "TrueNAS", "Tmux", "Twilio", "TypeScript", "Ubuntu",
    "UiPath", "Unifi Controller", "Unity", "Unreal Engine", "UptimeRobot", "UXPin", "Veeam", "Vercel", "VeraCrypt", "VeilleTechno",
    "Vite", "Visual Basic", "Visual Paradigm", "Visual Studio", "Visual Studio Code", "Vivaldi", "VMware ESXi", "VMware vSphere",
    "VB.NET", "Weka", "Webflow", "WebStorm", "Whiteboard", "Wireshark", "Windows Server", "WinSCP", "WordPress", "Workday",
    "Wunderlist", "Xcode", "XMind", "XMLSpy", "Xray", "YAML Tools", "Yellowfin BI", "Zapier", "Zabbix", "Zeplin", "Zeno", "Zod",
    "Zscaler"
    };

    private readonly List<string> certifications = new()
    {
       "AI-900 : Microsoft Azure AI Fundamentals",
    "AI-102 : Designing and Implementing a Microsoft Azure AI Solution",
    "AZ-900 : Microsoft Azure Fundamentals",
    "AZ-104 : Microsoft Azure Administrator",
    "AZ-204 : Developing Solutions for Microsoft Azure",
    "AZ-220 : Microsoft Azure IoT Developer",
    "AZ-305 : Designing Microsoft Azure Infrastructure Solutions",
    "AZ-400 : Designing and Implementing Microsoft DevOps Solutions",
    "AZ-500 : Microsoft Azure Security Technologies",
    "AZ-700 : Designing and Implementing Microsoft Azure Networking Solutions",
    "AZ-800 : Administering Windows Server Hybrid Core Infrastructure",
    "AZ-801 : Configuring Windows Server Hybrid Advanced Services",
    "DP-900 : Microsoft Azure Data Fundamentals",
    "DP-100 : Designing and Implementing a Data Science Solution on Azure",
    "DP-203 : Data Engineering on Microsoft Azure",
    "DP-300 - Administering Microsoft Azure SQL Solutions",
    "DP-420 - Designing and Implementing Cloud-Native Applications Using Microsoft Azure Cosmos DB",
    "MB-210 - Microsoft Dynamics 365 Sales",
    "MB-220 - Microsoft Dynamics 365 Marketing",
    "MB-230 - Microsoft Dynamics 365 Customer Service",
    "MB-310 - Microsoft Dynamics 365 Finance",
    "MB-500 - Microsoft Dynamics 365: Finance and Operations Apps Developer",
    "MB-910 - Microsoft Dynamics 365 Fundamentals",
    "MS-900 - Microsoft 365 Fundamentals",
    "MS-100 - Microsoft 365 Identity and Services",
    "MS-101 - Microsoft 365 Mobility and Security",
    "MS-102 - Microsoft 365 Administrator",
    "MS-203 - Microsoft 365 Messaging Administrator",
    "MS-500 - Microsoft 365 Security Administration",
    "MS-700 - Managing Microsoft Teams",
    "PL-900 - Microsoft Power Platform Fundamentals",
    "PL-100 - Microsoft Power Platform App Maker",
    "PL-200 - Microsoft Power Platform Functional Consultant",
    "PL-300 - Microsoft Power BI Data Analyst",
    "PL-400 - Microsoft Power Platform Developer",
    "SC-900 - Microsoft Security, Compliance, and Identity Fundamentals",
    "SC-200 - Microsoft Security Operations Analyst",
    "SC-300 - Microsoft Identity and Access Administrator",
    "SC-400 - Microsoft Information Protection Administrator",
    "MD-100 - Windows Client",
    "MD-101 - Managing Modern Desktops"
    };
    #endregion

    protected override void OnInitialized()
    {
        mission = MissionService.GetMission();

        mission.Technologies ??= new List<string> { "" };
        if (mission.Technologies.Count == 0)
            mission.Technologies.Add("");

        SynchronizeMissionTechLists();
    }


    private void ChooseMission()
    {
        mode = PageMode.Mission;
        missionUpdated = false;
        if (string.IsNullOrWhiteSpace(mission.MissionDetails))
        {
            mission.MissionDetails = "• ";
        }
        listInitialized = false;
    }

    private void ChooseCertification()
        => mode = PageMode.Certification;

    private void Visualiser()
        => missionUpdated = true;

    private async Task UpdateMissionAsync()
    {
        MissionService.UpdateMission(mission);

        var dto = new
        {
            titre = mission.MissionTitle,
            entreprise = mission.Client,
            dateDebut = mission.StartDate.ToString("yyyy-MM-dd"),
            dateFin = mission.EndDate.ToString("yyyy-MM-dd"),
            description = mission.MissionDetails?.Trim() ?? "",
            technologies = mission.Technologies
                                .Select((t, i) => mission.IsCustomTech[i] ? mission.CustomTechValues[i] : t)
                                .Where(t => !string.IsNullOrWhiteSpace(t))
                                .ToList()
        };
        var json = JsonSerializer.Serialize(dto);
        Console.WriteLine("Mission envoyée dans localStorage : " + json);

        // 💥 Ajoute cette ligne pour supprimer tout bloc présentation restant
        await JSRuntime.InvokeVoidAsync("localStorage.removeItem", "pendingPresentation");

        // 💾 Ensuite, stocke la mission comme d’habitude
        await JSRuntime.InvokeVoidAsync("localStorage.setItem", "pendingMission", json);

        // 🔁 Et redirige vers EditorTest
        NavManager.NavigateTo("/editor-test");

    }

    // Appelée par OnValidSubmit du formulaire Présentation
    private async Task UpdatePresentationAsync()
    {
        presentationUpdated = true;

        // Enregistre temporairement
        lastPresentation = presentation;

        var dto = new
        {
            nom = presentation.Nom,
            role = presentation.Role,
            texte = presentation.Presentation?.Trim() ?? "",
            competences = presentation.CompetenceGenerale?.Trim() ?? "",
            secteurs = presentation.Secteurs?.Trim() ?? "",
            anneeExp = presentation.Experience,
            langues = presentation.Langues?.Trim() ?? "",
            cursus = presentation.Cursus?.Trim() ?? "",
            technologies = presentation.Technologies
                             .Select((t, i) => presentation.IsCustomTech[i] ? presentation.CustomTechValues[i] : t)
                             .Where(t => !string.IsNullOrWhiteSpace(t))
                             .ToList()
        };

        var json = JsonSerializer.Serialize(dto);
        await JSRuntime.InvokeVoidAsync("localStorage.setItem", "pendingPresentation", json);

        NavManager.NavigateTo("/editor-test");
    }





    private void UpdateMission()
    {
        // Sert pour la soumission Certification uniquement
        MissionService.UpdateMission(mission);
        missionUpdated = false;
    }

    private void AddTech()
    {
        if (mission.Technologies.Count < 8)
        {
            mission.Technologies.Add("");
            mission.IsCustomTech.Add(false);
            mission.CustomTechValues.Add("");
        }
    }

    private void RemoveTech(int i)
    {
        if (mission.Technologies.Count > 1)
        {
            mission.Technologies.RemoveAt(i);
            mission.IsCustomTech.RemoveAt(i);
            mission.CustomTechValues.RemoveAt(i);
        }
    }



    private void OnTechChanged(ChangeEventArgs e, int i)
    {
        if (i >= 0 && i < mission.Technologies.Count)
            mission.Technologies[i] = e.Value?.ToString() ?? "";
    }
    private void OnCustomTechChanged(ChangeEventArgs e, int i)
    {
        if (i >= 0 && i < mission.CustomTechValues.Count)
            mission.CustomTechValues[i] = e.Value?.ToString() ?? "";
    }

    private void ToggleMissionCustomTech(int i)
    {
        if (i >= 0 && i < mission.IsCustomTech.Count)
        {
            mission.IsCustomTech[i] = !mission.IsCustomTech[i];
            if (mission.IsCustomTech[i])
            {
                mission.Technologies[i] = "";
            }
            else
            {
                mission.CustomTechValues[i] = "";
            }
        }
    }



    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (mode == PageMode.Mission && !listInitialized)
        {
            listInitialized = true;
            try
            {
                await JSRuntime.InvokeVoidAsync("initMissionDetailsList", detailsRef);
            }
            catch
            {
                // ignore
            }
        }
        if (mode == PageMode.Presentation && !competenceListInitialized)
        {
            competenceListInitialized = true;
            try
            {
                await JSRuntime.InvokeVoidAsync("initCompetenceDetailsList", competenceDetailsRef);
            }
            catch
            {
                // ignore
            }
        }
        if (mode == PageMode.Presentation && !secteursListInitialized)
        {
            secteursListInitialized = true;
            try
            {
                await JSRuntime.InvokeVoidAsync("initSecteursDetailsList", secteursRef);
            }
            catch
            {
                // ignore
            }
        }

    }
    private bool presentationUpdated = false;

    private async void ChoosePresentation()
    {
        mode = PageMode.Presentation;
        presentationUpdated = false;

        if (string.IsNullOrWhiteSpace(presentation.Nom))
        {
            await LoadLatestPresentationAsync();
        }
    }

    private PresentationModel? lastPresentation = null;

    private void VisualiserPresentation()
    {
        presentationUpdated = true;
    }
    private bool competenceListInitialized = false;
    private void AddPresentationTech()
    {
        presentation.Technologies.Add("");
        presentation.IsCustomTech.Add(false);
        presentation.CustomTechValues.Add("");
    }

    private void RemovePresentationTech(int i)
    {
        if (presentation.Technologies.Count > 1)
        {
            presentation.Technologies.RemoveAt(i);
            presentation.IsCustomTech.RemoveAt(i);
            presentation.CustomTechValues.RemoveAt(i);
        }
    }

    private void OnPresentationTechChanged(ChangeEventArgs e, int i)
    {
        if (i >= 0 && i < presentation.Technologies.Count)
            presentation.Technologies[i] = e.Value?.ToString() ?? "";
    }

    private void OnCustomPresentationTechChanged(ChangeEventArgs e, int i)
    {
        if (i >= 0 && i < presentation.CustomTechValues.Count)
            presentation.CustomTechValues[i] = e.Value?.ToString() ?? "";
    }

    private void ToggleCustomTech(int i)
    {
        if (i >= 0 && i < presentation.IsCustomTech.Count)
        {
            presentation.IsCustomTech[i] = !presentation.IsCustomTech[i];
            if (presentation.IsCustomTech[i])
            {
                presentation.Technologies[i] = ""; // désactive la sélection standard
            }
            else
            {
                presentation.CustomTechValues[i] = ""; // désactive le champ libre
            }
        }
    }
    private void SynchronizeMissionTechLists()
    {
        mission.Technologies ??= new List<string>();
        mission.IsCustomTech ??= new List<bool>();
        mission.CustomTechValues ??= new List<string>();

        while (mission.IsCustomTech.Count < mission.Technologies.Count)
            mission.IsCustomTech.Add(false);

        while (mission.CustomTechValues.Count < mission.Technologies.Count)
            mission.CustomTechValues.Add("");
    }
    private async Task LoadLatestPresentationAsync()
    {
        try
        {
            // Rechargement depuis la mémoire temporaire si dispo
            if (lastPresentation != null)
            {
                presentation = lastPresentation;
                return;
            }

            var json = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "pendingPresentation");
            if (!string.IsNullOrEmpty(json))
            {
                var old = JsonSerializer.Deserialize<PresentationModel>(json);
                if (old != null)
                {
                    presentation = old;
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine("Erreur lors du chargement de la présentation : " + ex.Message);
        }
    }



   


}
